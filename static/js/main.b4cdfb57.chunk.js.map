{"version":3,"sources":["logo.svg","components/Emplrow.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Emplrow","i","employees","hidden","props","className","onClick","removeEmployee","id","first","last","dob","email","phone","address","JSON","parse","localStorage","getItem","console","log","j","length","App","state","filter","employee","setState","setItem","stringify","handleFormSubmit","event","preventDefault","document","getElementById","value","trim","push","alert","alphabeticalFilterFirst","sort","a","b","localeCompare","alphabeticalFilterLast","href","src","logo","alt","htmlFor","type","placeholder","this","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b4cdfb57.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nfunction Emplrow(props) {\n  return(\n    <div>\n      <ul className=\"list-group list-group-horizontal\">\n        <li className=\"list-group-item col-2\"><span onClick={() => props.removeEmployee(props.id)} className=\"remove\">\n        ùòÖ \n        </span>  {props.first}</li>\n        <li className=\"list-group-item col-2\">{props.last}</li>\n        <li className=\"list-group-item col-2\">{props.dob}</li>\n        <li className=\"list-group-item col-2\">{props.email}</li>\n        <li className=\"list-group-item col-2\">{props.phone}</li>\n        <li className=\"list-group-item col-2\">{props.address}</li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Emplrow;","import React, { Component } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport Emplrow from \"./components/Emplrow\";\n\nvar i;\nvar employees;\nvar hidden;\n\nif (JSON.parse(localStorage.getItem(\"employeeData\")) == null || localStorage.getItem(\"employeeData\") === \"[]\") {\n  employees = [];\n  i = 0;\n  hidden = \"hide\";\n  console.log(\"is null\");\n} else {\n  console.log(\"not null\");\n  employees = JSON.parse(localStorage.getItem(\"employeeData\"));\n  for (var j = 0; j < employees.length; j++) {\n    if (i === employees[j].id) {\n      i++;\n    } else if (i + 1  === employees[j].id) {\n      i += 2;\n    }\n    else {\n      i = employees.length + 1;\n    }\n  }\n  hidden = \"\";\n}\n\nconsole.log(\"id\", i);\n\nclass App extends Component {\n\n  state = {\n    employees\n  };\n\n  removeEmployee = id => {\n    // Filter this.state.friends for friends with an id not equal to the id being removed\n    employees = this.state.employees.filter(employee => employee.id !== id);\n    // Set this.state.friends equal to the new friends array\n    this.setState({ employees });\n    localStorage.setItem(\"employeeData\", JSON.stringify(employees));\n    if(employees.length === 0) {\n      hidden = \"hide\";\n    }\n  };\n\n  handleFormSubmit = event => {\n  \n    console.log(employees);\n\n      event.preventDefault();\n\n      if(\n      document.getElementById(\"first\").value.trim() === \"\" ||\n      document.getElementById(\"last\").value.trim() === \"\" ||\n      document.getElementById(\"dob\").value.trim() === \"\" ||\n      document.getElementById(\"email\").value.trim() === \"\" ||\n      document.getElementById(\"phone\").value.trim() === \"\" ||\n      document.getElementById(\"address\").value.trim() === \"\"\n      ) {\n        alert(\"Please fill out all fields.\");\n        return;\n      }\n\n      employees.push({\n        id: i + 1,\n        first: document.getElementById(\"first\").value,\n        last: document.getElementById(\"last\").value,\n        dob: document.getElementById(\"dob\").value,\n        email: document.getElementById(\"email\").value,\n        phone: document.getElementById(\"phone\").value,\n        address: document.getElementById(\"address\").value\n      });\n\n      document.getElementById(\"first\").value = \"\";\n      document.getElementById(\"last\").value = \"\";\n      document.getElementById(\"dob\").value = \"\";\n      document.getElementById(\"email\").value = \"\";\n      document.getElementById(\"phone\").value = \"\";\n      document.getElementById(\"address\").value = \"\";\n\n      console.log(\"emploi\", employees);\n\n      i++;\n\n      localStorage.setItem(\"employeeData\", JSON.stringify(employees));\n\n      this.setState({ employees });\n\n      hidden=\"\";\n      \n  };\n\n  alphabeticalFilterFirst = () => {\n    employees = employees.sort((a, b) => a.first.localeCompare(b.first));\n    localStorage.setItem(\"employeeData\", JSON.stringify(employees));\n    this.setState({ employees });\n  }\n\n  alphabeticalFilterLast = () => {\n    employees = employees.sort((a, b) => a.last.localeCompare(b.last));\n    localStorage.setItem(\"employeeData\", JSON.stringify(employees));\n    this.setState({ employees });\n\n  }\n\n  render() {\n    console.log(employees);\n    \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <br></br>\n          <a href=\"#rows\" id={hidden} className=\"btn btn-primary directory\">View Directory</a>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <div id=\"main\">\n            <form id=\"left\">\n              <div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"exampleInputEmail1\">First Name</label>\n                  <input\n                  type=\"firstname\" \n                  className=\"form-control\" \n                  id=\"first\"></input>\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"exampleInputEmail1\">Last Name</label>\n                  <input \n                  type=\"lastname\" \n                  className=\"form-control\" \n                  id=\"last\"></input>\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"exampleInputEmail1\">DOB</label>\n                  <input \n                  type=\"firstname\" \n                  className=\"form-control\" \n                  id=\"dob\" \n                  placeholder=\"(MM/DD/YYYY)\"></input>\n                </div>\n              </div>\n            </form>\n      \n            <form id=\"right\">\n              <div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"exampleInputEmail1\">Email</label>\n                  <input\n                  type=\"email\" \n                  className=\"form-control\" \n                  id=\"email\"></input>\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"exampleInputPassword1\">Phone</label>\n                  <input\n                  type=\"phone\" \n                  className=\"form-control\" \n                  id=\"phone\"></input>\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"exampleInputPassword1\">Address</label>\n                  <input\n                  type=\"address\" \n                  className=\"form-control\" \n                  id=\"address\"></input>\n                </div>\n              </div>\n            </form>\n      \n            <button type=\"submit\" className=\"btn btn-primary\" onClick={this.handleFormSubmit}>Submit</button>\n            <br></br>\n            <br></br>\n          <button type=\"submit\" className=\"btn btn-primary\" id={hidden} onClick={this.alphabeticalFilterFirst}>Filter by First Name</button>\n          <span id={hidden}> || </span>\n          <button type=\"submit\" className=\"btn btn-primary\" id={hidden} onClick={this.alphabeticalFilterLast}>Filter by Last Name</button>\n          </div>\n          <br></br>\n        </header>\n  \n        <ul className=\"list-group list-group-horizontal\" id={hidden}>\n        <li className=\"list-group-item list-group-item-dark col-2\">First Name</li>\n        <li className=\"list-group-item list-group-item-dark col-2\">Last Name</li>\n        <li className=\"list-group-item list-group-item-dark col-2\">DOB</li>\n        <li className=\"list-group-item list-group-item-dark col-2\">Email</li>\n        <li className=\"list-group-item list-group-item-dark col-2\">Phone</li>\n        <li className=\"list-group-item list-group-item-dark col-2\">Address</li>\n        </ul>\n        <div id=\"rows\">\n          {this.state.employees.map(employee => (\n            <Emplrow\n              removeEmployee={this.removeEmployee}\n              id={employee.id}\n              first={employee.first}\n              last={employee.last}\n              dob={employee.dob}\n              email={employee.email}\n              phone={employee.phone}\n              address={employee.address}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}